function merge(arr1, arr2) {
    var res = [];
    let arr1Len = arr1.length;
    let arr2Len = arr2.length;
    let totalLen = arr1Len + arr2Len;

    let i = 0;
    let j = 0;
    let k = 0;


    while (k < totalLen) {
        if (arr1[i] < arr2[j]) {
            res.push(arr1[i]);
            i = i + 1;
            k = k + 1;
        } else if (arr2[j] <= arr2[i]) {
            res.push(arr2[j]);
            j = j + 1;
            k = k + 1;
        } else if (i >= arr1Len && j < arr2Len) {
            console.log(res.concat(arr2.slice(j, arr2Len + 1)));
            return res.concat(arr2.slice(j, arr2Len + 1));
        } else if (j >= arr2Len && i < arr1Len) {
             console.log(arr1.slice(i, arr1Len + 1));
            return res.concat(arr1.slice(i, arr1Len + 1));
        } else {
            k = totalLen;
        }

    }
    return res;
}


/// cut to least possible
/// sort them
/// merge from least to all


function mergeSort(array) {
    if (array.length <= 1) {
        return array;
    }


    const middle = Math.floor(array.length / 2);
    const leftArr = array.slice(0, middle);
    const rightArr = array.slice(middle);
    return merge(mergeSort(leftArr), mergeSort(rightArr));
}


console.log(mergeSort([2,1,4,5,8,11,10]));

// Op: [ [ 2, 5 ], 2 ]
class Node{
    constructor(val){
        this.val=val;
        this.next=null;
    }
    
};

class SinglyLinkedList{
    constructor(){
    this.head=null;
    this.tail=null;
    this.size=0;
    }
    
    push(value){
        if(!this.head){
            this.head=value;
            this.tail=value
            this.size=this.size+1;
        }else{
            this.tail.next=value;
            this.tail=value;
            this.size=this.size+1
        }
        return this.head;
    }
    
    pop(){
        if(!this.head){
        return null;
        }else{
            let currNode=this.head;
            for(let i=0; i < this.size-2; i++){
                currNode=currNode.next;
            }
            currNode.next=null;
            this.tail=currNode;
            this.size=this.size-1;
        }
        
    }
    
    print(){
        let res=[];
        if(!this.head) return res;
        var currNode=this.head;
        while(currNode!=null){
            res.push(currNode.val);
            currNode=currNode.next;
        }
        return [res,this.size];
    }
}  

var ssl= new SinglyLinkedList();
var newNode=new Node(2);
var newNode2=new Node(5);
var newNode3=new Node(6);
var newNode4=new Node(7);
ssl.push(newNode);
ssl.push(newNode2);
ssl.push(newNode3);
ssl.pop();
ssl.push(newNode4);
ssl.pop();
console.log(ssl.print());
